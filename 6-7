package hello.hellospring.controller;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
 @Controller
 public class HomeController {
    @GetMapping("/")
 public String home() {
 return "home";
    }
 }


<!DOCTYPE HTML>
 <html xmlns:th="http://www.thymeleaf.org">
 <body>
 <div class="container">
    <div>
        <h1>Hello Spring</h1>
        <p>회원기능</p>
        <p>
            <a 
href="/members/new">회원가입</a>
            <a 
href="/members">회원목록</a>
        </p>
    </div>
 </div> <!-- /container -->
 </body>
 </html>


 @Controller
 public class MemberController {
 private final MemberService memberService;
    @Autowired
 public MemberController(MemberService memberService) {
 this.memberService = memberService;
    }
    @GetMapping(value = "/members/new")
 public String createForm() {
 return "members/createMemberForm";
    }
 }


  <!DOCTYPE HTML>
 <html xmlns:th="http://www.thymeleaf.org">
 <body>
 <div class="container">
 )
 `
    <form action="/members/new" method="post">
        <div 
class="form-group">
            <label 
for="name">이름</label>
            <input 
type="text" id="name" name="name" placeholder="이름을 입력하세요.">
        </div>
        <button type="submit">등록</button>
    </form>
 </div> <!-- /container -->
 </body>
 </html>


  package hello.hellospring.controller;
 public class MemberForm {
 private String name;
 public String getName() {
 return name;
    }
 public void setName(String name) {
 this.name = name;
    }
 }


  @PostMapping(value = "/members/new")
 public String create(MemberForm form) {
 Member member = new Member();
    member.setName(form.getName());
    memberService.join(member);
 return "redirect:/";
}


 @GetMapping(value = "/members")
 public String list(Model model) {
 List<Member> members = memberService.findMembers();
    model.addAttribute("members", members);
 return "members/memberList";
 }


 <!DOCTYPE HTML>
 <html xmlns:th="http://www.thymeleaf.org">
 <body>
 <div class="container">
    <div>
        <table>
            <thead>
            <tr>
                <th>#</th>
                <th>이름</th>
            </tr>
            </thead>
            <tbody>
            <tr 
th:each="member : ${members}">
                <td 
th:text="${member.id}"></td>
                <td 
            </tr>
            </tbody>
        </table>
    </div>
 th:text="${member.name}"></td>
 </div> <!-- /container -->
 </body>
 </html>



  package hello.hellospring;
 import hello.hellospring.repository.JdbcMemberRepository;
 import hello.hellospring.repository.JdbcTemplateMemberRepository;
 import hello.hellospring.repository.MemberRepository;
 import hello.hellospring.repository.MemoryMemberRepository;
import hello.hellospring.service.MemberService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import javax.sql.DataSource;
 @Configuration
 public class SpringConfig {
 private final DataSource dataSource;
 public SpringConfig(DataSource dataSource) {
 this.dataSource = dataSource;
    }
    @Bean
 public MemberService memberService() {
 return new MemberService(memberRepository());
    }
    @Bean
 public MemberRepository memberRepository() {
 //
 }

 return new MemoryMemberRepository();
 return new JdbcMemberRepository(dataSource);
    }



  package hello.hellospring.service;
 import hello.hellospring.domain.Member;
 import hello.hellospring.repository.MemberRepository;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.transaction.annotation.Transactional;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 @SpringBootTest
 @Transactional
 class MemberServiceIntegrationTest {
    @Autowired MemberService memberService;
    @Autowired MemberRepository memberRepository;
    @Test
 public void 회원가입() throws Exception {
 //Given
 Member member = new Member();
        member.setName("hello");
 //When
 Long saveId = memberService.join(member);
//Then
 Member findMember = memberRepository.findById(saveId).get();
 assertEquals(member.getName(), findMember.getName());
    }
    @Test
 public void 중복_회원_예외() throws Exception {
 //Given
 Member member1 = new Member();
        member1.setName("spring");
 Member member2 = new Member();
        member2.setName("spring");
 //When
        memberService.join(member1);
 IllegalStateException e = assertThrows(IllegalStateException.class,
                () -> memberService.join(member2));
 assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원");
    }
 }



  package hello.hellospring;
 **
 import hello.hellospring.repository.*;
 import hello.hellospring.service.MemberService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 @Configuration
 public class SpringConfig {
 private final MemberRepository memberRepository;
 public SpringConfig(MemberRepository memberRepository) {
 this.memberRepository = memberRepository;
    }
    @Bean
 public MemberService memberService() {
 return new MemberService(memberRepository);
    }
 }
